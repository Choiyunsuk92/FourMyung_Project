<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fourMyung.mapper.MemberMapper" >
<sql id="basecolumn">
	MEM_DIV_CD, USER_ID, USER_PASS, USER_NM, USER_BIRTH, 
	USER_EMAIL, USER_PH, USER_ADDR, USER_GENDER, JOIN_DT, SYS_MDF_DT, JOIN_OK  
</sql>
<sql id="resColumn">
RES_NUM, MEM_NUM, ROOM_NUM, SRVC_NUM, USER_ID, USER_NM ,USER_PH,
RES_CHK_IN_DT, RES_CHK_OUT_DT, USE_ADULT, USE_CHILD, ROOM_DIV_CD, SYS_CRET_DT, SYS_MDF_DT, ADD_REQ, PAY_TYPE, PRICE, ROOM_OF_NUM
</sql>
<insert id="insertMember" parameterType="fourMyung.domain.member.MemberDTO">
	insert into c_member ( <include refid="basecolumn" />  )
		values(#{memDivCd}, #{userId}, #{userPass}, #{userNm}, #{userBirth},
		#{userEmail}, #{userPh}, #{userAddr}, #{userGender}, sysdate, null, null)
</insert>

<update id="joinOkUpdate" parameterType="fourMyung.domain.member.MemberDTO">
	update c_member
	set join_ok = #{joinOk}
	where user_id = #{userId} and USER_EMAIL = #{userEmail}
	and join_ok is null
</update>

<resultMap type="fourMyung.domain.member.MemberDTO" id="baseMember" >
	<constructor>
		<idArg column="user_Id" javaType="string" />
		<arg column="MEM_DIV_CD" javaType="string" />
		<arg column="USER_PASS" javaType="string" />
		<arg column="USER_NM" javaType="string" />
		<arg column="USER_BIRTH" javaType="java.sql.Timestamp"/>
		<arg column="USER_EMAIL" javaType="string" />
		<arg column="USER_PH" javaType="string" />
		<arg column="USER_ADDR" javaType="string" />
		<arg column="USER_GENDER" javaType="string" />
		<arg column="JOIN_DT" javaType="java.sql.Timestamp" />
		<arg column="SYS_MDF_DT" javaType="java.sql.Timestamp" />
		<arg column="JOIN_OK" javaType="string" />
	</constructor>
</resultMap>

<select id="selectByMember" parameterType="fourMyung.domain.member.MemberDTO" resultMap="baseMember">
	select <include refid="basecolumn" /> 
	FROM C_MEMBER 
	WHERE USER_ID = #{userId}
</select>
<select id="myPageHotel" resultType="fourMyung.domain.hotel.HotelResInfoDTO">
SELECT	H.RES_NUM AS RES_NUM, 
		C.PAY_NUM AS PAY_NUM,
		H.ROOM_NUM AS ROOM_NUM,
		G.ROOM_NM AS ROOM_NM,
		H.SYS_CRET_DT AS SYS_CRET_DT,
		H.RES_CHK_IN_DT AS RES_CHK_IN_DT,
		TO_NUMBER(H.USE_ADULT) + TO_NUMBER(H.USE_CHILD) AS USE_ADULT,
		C.PAY_PRICE AS PRICE,
		DECODE(C.PAY_TYPE, 'KP', '카카오페이', 'BT', '실시간계좌이체') AS PAY_TYPE,
		DECODE(C.STTUS_DIV_CD, 'Y', '결제완료', 'N', '예약취소') AS STTUS
  FROM	H_HTL_RES H,
		C_PAYMENT C,
		( SELECT B.PAY_NUM, B.RES_NUM
			FROM H_HTL_RES A,
				 H_HTL_PAYMENT B
		   WHERE A.RES_NUM = B.RES_NUM
			 AND A.USER_ID = #{userId}) D,
		H_HTL_ROOM G
 WHERE H.RES_NUM = D.RES_NUM
   AND C.PAY_NUM = D.PAY_NUM
   AND G.ROOM_NUM = H.ROOM_NUM
 ORDER BY H.RES_CHK_IN_DT ASC
</select>

<select id="myPageLeisure" resultType="fourMyung.domain.member.MypageLeisureDTO">
SELECT DISTINCT(z.ticket_num) AS TICKET_NUM,
      z.total_price,
      z.use_date,
      z.res_date,
      z.pay_type,
      Z.LEISURE_NAME,
      Z.STTUS_DIV_CD
  FROM (
SELECT a.ticket_num AS TICKET_NUM,
       a.total_price AS TOTAL_PRICE,
       a.use_date AS USE_DATE,
       a.res_date AS RES_DATE,
       DECODE(a.pay_type, 'KP', '카카오페이', 'BT', '실시간계좌이체') AS PAY_TYPE,
       c.leisure_name AS LEISURE_NAME,
       c.leisure_age AS LEISURE_AGE,
       b.ticket_qty AS TICKET_QTY,
       DECODE(e.sttus_div_cd, 'Y', '결제완료', 'N', '예약취소') AS STTUS_DIV_CD
  FROM  L_TICKET A,
        L_TICKET_DETAIL B,
        L_LSR_LIST C,
        (SELECT ticket_num
          FROM L_USER
         WHERE USER_ID = #{userId}) D,
        (select cp.pay_num, cp.sttus_div_cd, lp.ticket_num
          from c_payment CP,
               L_LEI_PAYMENT LP
         WHERE cp.user_id = #{userId}
           and cp.pay_num = lp.pay_num ) E
 WHERE A.TICKET_NUM = D.TICKET_NUM
   AND a.ticket_num = b.ticket_num
   AND b.leisure_num = c.leisure_num
   AND a.ticket_num = e.ticket_num  ) Z
 ORDER BY Z.RES_DATE ASC
</select>
<select id="myPageLeisureDetail" resultType="fourMyung.domain.member.MypageLeisureDTO">
SELECT a.ticket_num AS TICKET_NUM,
       e.pay_num AS PAY_NUM,
       a.total_price AS TOTAL_PRICE,
       a.use_date AS USE_DATE,
       a.res_date AS RES_DATE,
       DECODE(a.pay_type, 'KP', '카카오페이', 'BT', '실시간계좌이체') AS PAY_TYPE,
       c.leisure_name || ' '||
       DECODE(c.leisure_age, 'adult', '어른', 'child', '어린이') || ':' ||
       DECODE(c.LEISURE_TIME, 'PM', '오후', 'AM', '오전', 'allDay', '종일권') LEISURE_NAME,
       b.ticket_qty AS TICKET_QTY,
       DECODE(e.sttus_div_cd, 'Y', '결제완료', 'N', '예약취소') AS STTUS_DIV_CD
  FROM  L_TICKET A,
        L_TICKET_DETAIL B,
        L_LSR_LIST C,
        (SELECT ticket_num
          FROM L_USER
         WHERE USER_ID = #{userId}) D,
        (select cp.pay_num, cp.sttus_div_cd, lp.ticket_num
          from c_payment CP,
               L_LEI_PAYMENT LP
         WHERE cp.user_id = #{userId}
           and cp.pay_num = lp.pay_num ) E
 WHERE A.TICKET_NUM = D.TICKET_NUM
   AND a.ticket_num = b.ticket_num
   AND b.leisure_num = c.leisure_num
   AND a.ticket_num = e.ticket_num
 ORDER BY TO_NUMBER(E.PAY_NUM) ASC
</select>

<update id="hotelCncl">
UPDATE C_PAYMENT
   SET STTUS_DIV_CD = 'N'
 WHERE PAY_NUM = ( SELECT PAY_NUM
					 FROM H_HTL_PAYMENT A,
					      H_HTL_RES B
					WHERE A.RES_NUM = B.RES_NUM
					  AND B.USER_ID = #{userId}
					  AND B.RES_NUM = #{resNum})
</update>

<update id="leisureCncl">
UPDATE C_PAYMENT
   SET STTUS_DIV_CD = 'N'
 WHERE PAY_NUM = (
					SELECT	PAY_NUM
					  FROM	L_LEI_PAYMENT A,
							L_USER B
					 WHERE A.TICKET_NUM = B.TICKET_NUM
					   AND B.USER_ID = #{userId}
					   AND b.ticket_num = #{ticketNum} )
</update>
</mapper>